/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LiveSkeleton_TYPES_H
#define LiveSkeleton_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace LiveSkeletonTransfer {

struct ServerStatus {
  enum type {
    STOPPED = 0,
    NOT_STARTED = 1,
    INITIALIZED = 2,
    DEFAULT_SET = 3,
    CONNECTED = 4,
    FITTING_INITIAL_POSE = 5,
    ESTIMATING = 6
  };
};

extern const std::map<int, const char*> _ServerStatus_VALUES_TO_NAMES;

struct JointType {
  enum type {
    ROOT = 1,
    JOINT = 2,
    ENDSITE = 3
  };
};

extern const std::map<int, const char*> _JointType_VALUES_TO_NAMES;

typedef double TimeStamp;

typedef std::string FilePath;

class Joint;

class SkeletonData;

class InvalidOperation;

class TimedOutException;

typedef struct _Joint__isset {
  _Joint__isset() : name(false), parent(false), type(false), rot(false), pos(false) {}
  bool name :1;
  bool parent :1;
  bool type :1;
  bool rot :1;
  bool pos :1;
} _Joint__isset;

class Joint : public virtual ::apache::thrift::TBase {
 public:

  Joint(const Joint&);
  Joint& operator=(const Joint&);
  Joint() : name(), parent(), type((JointType::type)0) {
  }

  virtual ~Joint() throw();
  std::string name;
  std::string parent;
  JointType::type type;
  std::vector<double>  rot;
  std::vector<double>  pos;

  _Joint__isset __isset;

  void __set_name(const std::string& val);

  void __set_parent(const std::string& val);

  void __set_type(const JointType::type val);

  void __set_rot(const std::vector<double> & val);

  void __set_pos(const std::vector<double> & val);

  bool operator == (const Joint & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (__isset.parent != rhs.__isset.parent)
      return false;
    else if (__isset.parent && !(parent == rhs.parent))
      return false;
    if (!(type == rhs.type))
      return false;
    if (__isset.rot != rhs.__isset.rot)
      return false;
    else if (__isset.rot && !(rot == rhs.rot))
      return false;
    if (__isset.pos != rhs.__isset.pos)
      return false;
    else if (__isset.pos && !(pos == rhs.pos))
      return false;
    return true;
  }
  bool operator != (const Joint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Joint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Joint &a, Joint &b);

inline std::ostream& operator<<(std::ostream& out, const Joint& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SkeletonData__isset {
  _SkeletonData__isset() : joints(false), timestamp(false), frame(false) {}
  bool joints :1;
  bool timestamp :1;
  bool frame :1;
} _SkeletonData__isset;

class SkeletonData : public virtual ::apache::thrift::TBase {
 public:

  SkeletonData(const SkeletonData&);
  SkeletonData& operator=(const SkeletonData&);
  SkeletonData() : timestamp(0), frame(0) {
  }

  virtual ~SkeletonData() throw();
  std::vector<Joint>  joints;
  TimeStamp timestamp;
  int32_t frame;

  _SkeletonData__isset __isset;

  void __set_joints(const std::vector<Joint> & val);

  void __set_timestamp(const TimeStamp val);

  void __set_frame(const int32_t val);

  bool operator == (const SkeletonData & rhs) const
  {
    if (__isset.joints != rhs.__isset.joints)
      return false;
    else if (__isset.joints && !(joints == rhs.joints))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(frame == rhs.frame))
      return false;
    return true;
  }
  bool operator != (const SkeletonData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SkeletonData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SkeletonData &a, SkeletonData &b);

inline std::ostream& operator<<(std::ostream& out, const SkeletonData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InvalidOperation__isset {
  _InvalidOperation__isset() : whatOp(false), why(false) {}
  bool whatOp :1;
  bool why :1;
} _InvalidOperation__isset;

class InvalidOperation : public ::apache::thrift::TException {
 public:

  InvalidOperation(const InvalidOperation&);
  InvalidOperation& operator=(const InvalidOperation&);
  InvalidOperation() : whatOp(0), why() {
  }

  virtual ~InvalidOperation() throw();
  int32_t whatOp;
  std::string why;

  _InvalidOperation__isset __isset;

  void __set_whatOp(const int32_t val);

  void __set_why(const std::string& val);

  bool operator == (const InvalidOperation & rhs) const
  {
    if (!(whatOp == rhs.whatOp))
      return false;
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const InvalidOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidOperation &a, InvalidOperation &b);

inline std::ostream& operator<<(std::ostream& out, const InvalidOperation& obj)
{
  obj.printTo(out);
  return out;
}


class TimedOutException : public ::apache::thrift::TException {
 public:

  TimedOutException(const TimedOutException&);
  TimedOutException& operator=(const TimedOutException&);
  TimedOutException() {
  }

  virtual ~TimedOutException() throw();

  bool operator == (const TimedOutException & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TimedOutException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimedOutException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(TimedOutException &a, TimedOutException &b);

inline std::ostream& operator<<(std::ostream& out, const TimedOutException& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
