// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "LiveSkeletonService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::LiveSkeletonTransfer;

class LiveSkeletonServiceHandler : virtual public LiveSkeletonServiceIf {
 public:
  LiveSkeletonServiceHandler() {
    // Your initialization goes here
  }

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  void getServerVersion(std::string& _return) {
    // Your implementation goes here
    printf("getServerVersion\n");
  }

  ServerStatus::type getServerStatus() {
    // Your implementation goes here
    printf("getServerStatus\n");
  }

  void setServerStatus(const ServerStatus::type status) {
    // Your implementation goes here
    printf("setServerStatus\n");
  }

  void stopServer() {
    // Your implementation goes here
    printf("stopServer\n");
  }

  void shutdown() {
    // Your implementation goes here
    printf("shutdown\n");
  }

  void getSkeletonDefaultPose(SkeletonData& _return) {
    // Your implementation goes here
    printf("getSkeletonDefaultPose\n");
  }

  void setSkeletonDefaultPose(const SkeletonData& data) {
    // Your implementation goes here
    printf("setSkeletonDefaultPose\n");
  }

  void setSkeletonData(const SkeletonData& data) {
    // Your implementation goes here
    printf("setSkeletonData\n");
  }

  void getSkeletonData(SkeletonData& _return) {
    // Your implementation goes here
    printf("getSkeletonData\n");
  }

  bool getDoLoopEstimation() {
    // Your implementation goes here
    printf("getDoLoopEstimation\n");
  }

  void setDoLoopEstimation(const bool state) {
    // Your implementation goes here
    printf("setDoLoopEstimation\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<LiveSkeletonServiceHandler> handler(new LiveSkeletonServiceHandler());
  shared_ptr<TProcessor> processor(new LiveSkeletonServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

